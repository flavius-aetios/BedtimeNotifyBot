import telebot
import config

from time import sleep

from telebot import types
from datetime import time

bot = telebot.TeleBot(config.TOKEN)

beforeTime = time(0, 0)
idealSleepTime = time(0, 0)
alarmTime = time(0, 0)
periodNotifyTime = time(0, 0)

@bot.message_handler(commands=['start'])
def welcome(message):
	
	# keyboard
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1 = types.KeyboardButton("1. –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ —Å–Ω–∞")
	item2 = types.KeyboardButton("2. –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞")
	item3 = types.KeyboardButton("3. –í—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞")
	item4 = types.KeyboardButton("4. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

	markup.add(item1, item2, item3, item4)

	bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.".format(message.from_user, bot.get_me()),
		parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def lalala(message):
	if message.chat.type == 'private':
		match message.text:
			case "1. –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ —Å–Ω–∞":
				markup = types.InlineKeyboardMarkup(row_width=1)
				item1 = types.InlineKeyboardButton("–∑–∞ 15 –º–∏–Ω—É—Ç", 		callback_data='before_15min')
				item2 = types.InlineKeyboardButton("–∑–∞ 30 –º–∏–Ω—É—Ç", 		callback_data='before_30min')
				item3 = types.InlineKeyboardButton("–∑–∞ 45 –º–∏–Ω—É—Ç", 		callback_data='before_45min')
				item4 = types.InlineKeyboardButton("–∑–∞ 1 —á–∞—Å", 			callback_data='before_1hour')
				item5 = types.InlineKeyboardButton("–∑–∞ 1 —á–∞—Å 30 –º–∏–Ω", 	callback_data='before_1hour45min')
				item6 = types.InlineKeyboardButton("–∑–∞ 2 —á–∞—Å–∞", 		callback_data='before_2hour')
 
				markup.add(item1, item2, item3, item4, item5, item6)

				bot.send_message(message.chat.id, 'C–∫–æ–ª—å–∫–æ –¥–æ —Å–Ω–∞?', reply_markup=markup)

			case "2. –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞":
				markup = types.InlineKeyboardMarkup(row_width=1)
				item1 = types.InlineKeyboardButton("7 —á–∞—Å–æ–≤", 			callback_data='ideal_7Hour')
				item2 = types.InlineKeyboardButton("7 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç", 	callback_data='ideal_7hour30min')
				item3 = types.InlineKeyboardButton("8 —á–∞—Å–æ–≤", 			callback_data='ideal_8hour')
				item4 = types.InlineKeyboardButton("8 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç", 	callback_data='ideal_8hour30min')
				item5 = types.InlineKeyboardButton("9 —á–∞—Å–æ–≤", 			callback_data='ideal_9hour')
				item6 = types.InlineKeyboardButton("9 —á–∞—Å–æ–≤", 			callback_data='ideal_9hour30min')
 
				markup.add(item1, item2, item3, item4, item5, item6)

				bot.send_message(message.chat.id, '–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞', reply_markup=markup)
				
			case "3. –í—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞":
				markup = types.InlineKeyboardMarkup(row_width=1)
				item1 = types.InlineKeyboardButton("7 —á–∞—Å–æ–≤", 			callback_data='alarm_7Hour')
				item2 = types.InlineKeyboardButton("7 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç", 	callback_data='alarm_7hour30min')
				item3 = types.InlineKeyboardButton("8 —á–∞—Å–æ–≤", 			callback_data='alarm_8hour')
				item4 = types.InlineKeyboardButton("8 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç", 	callback_data='alarm_8hour30min')
				item5 = types.InlineKeyboardButton("9 —á–∞—Å–æ–≤", 			callback_data='alarm_9hour')
				item6 = types.InlineKeyboardButton("9 —á–∞—Å–æ–≤", 			callback_data='alarm_9hour30min')
 
				markup.add(item1, item2, item3, item4, item5, item6)

				bot.send_message(message.chat.id, '–í—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞', reply_markup=markup)
			
			case "4. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
				markup = types.InlineKeyboardMarkup(row_width=1)
				item1 = types.InlineKeyboardButton("1 –º–∏–Ω—É—Ç–∞", 	callback_data='periodNotify_1min')
				item2 = types.InlineKeyboardButton("2 –º–∏–Ω—É—Ç—ã", 	callback_data='periodNotify_2min')
				item3 = types.InlineKeyboardButton("3 –º–∏–Ω—É—Ç—ã", 	callback_data='periodNotify_3min')
				item4 = types.InlineKeyboardButton("4 –º–∏–Ω—É—Ç—ã", 	callback_data='periodNotify_4min')
				item5 = types.InlineKeyboardButton("5 –º–∏–Ω—É—Ç", 	callback_data='periodNotify_5min')
				item6 = types.InlineKeyboardButton("10 –º–∏–Ω—É—Ç", 	callback_data='periodNotify_10min')
 
				markup.add(item1, item2, item3, item4, item5, item6)

				bot.send_message(message.chat.id, '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', reply_markup=markup)
			case _:
				bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—åüò¢')

# try:
	
# except Exception as e:
# 	print(repr(e))

# ---------------BEFORE TIME-----------------
@bot.callback_query_handler(func=lambda call: call.data == "before_15min")
def before_15min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 15 –º–∏–Ω</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(0, 15)
	
	while(1):
		print(beforeTime)
		sleep(1)

@bot.callback_query_handler(func=lambda call: call.data == "before_30min")
def before_30min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 30 –º–∏–Ω—É—Ç</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(0, 30)
	print(beforeTime)

@bot.callback_query_handler(func=lambda call: call.data == "before_45min")
def before_45min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 45 –º–∏–Ω—É—Ç</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(0, 45)
	print(beforeTime)

@bot.callback_query_handler(func=lambda call: call.data == "before_1hour")
def before_1hour_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 1 —á–∞—Å</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(1, 0)
	print(beforeTime)

@bot.callback_query_handler(func=lambda call: call.data == "before_1hour45min")
def before_1hour45min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 1 —á–∞—Å 30 –º–∏–Ω</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(1, 30)

@bot.callback_query_handler(func=lambda call: call.data == "before_2hour")
def before_2hour_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–Ω–∞: <b>–∑–∞ 2 —á–∞—Å–∞</b>", parse_mode='html',)
	global beforeTime
	beforeTime = time(2, 0)


# ------------------IDEAL TIME------------------
@bot.callback_query_handler(func=lambda call: call.data == "ideal_7Hour")
def ideal_7Hour_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>7 —á–∞—Å–æ–≤</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(7, 0)

@bot.callback_query_handler(func=lambda call: call.data == "ideal_7hour30min")
def ideal_7hour30min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>7 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(7, 30)

@bot.callback_query_handler(func=lambda call: call.data == "ideal_8hour")
def ideal_8hour_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>8 —á–∞—Å–æ–≤</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(8, 0)

@bot.callback_query_handler(func=lambda call: call.data == "ideal_8hour30min")
def ideal_8hour30min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>8 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(8, 30)

@bot.callback_query_handler(func=lambda call: call.data == "ideal_9hour")
def ideal_9hour_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>9 —á–∞—Å–æ–≤</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(9, 0)

@bot.callback_query_handler(func=lambda call: call.data == "ideal_9hour30min")
def ideal_9hour30min_pressed(call: types.CallbackQuery):
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None, text="–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: <b>9 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç</b>", parse_mode='html',)
	global idealSleepTime
	idealSleepTime = time(9, 30)

# @bot.callback_query_handler(func=lambda call: True)
# def callback_inline(call):
# 	try:
# 		if call.message:
# 			if call.data == '15min':
# 				bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
# 			elif call.data == '30min':
# 				bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
 
# 			# remove inline buttons
# 			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="1. –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ —Å–Ω–∞", reply_markup=None)
 
# 			# show alert
# 			bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
# 				text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")
 
# 	except Exception as e:
# 		print(repr(e))

# RUN

bot.polling(none_stop=True)






